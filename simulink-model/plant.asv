component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos={[0;0;0],'m'}; %Position:right
    v = {[0;0;0], 'm/s' }; %Velocity:right
    a = {[0;0;0], 'm/s^2' }; %Acceleration:right
    angle = {[0;0;0],'rad'};%Angle:right
    w = {[0;0;0],'rad/s'};%Angular velocity:right
end

parameters
    m = {0.027,'kg'};%Mass
    g = {9.81,'m/s^2'};%Gravity
    d = {0.046,'m'};%Arm length
    lift = {1.9796e-9,'N/(rad/s)^2'};%Lift constant b
    drag = {2.5383e-11,'N*m/(rad/s)^2'};%Drag constant k
end

parameters(Access=private)    
    %Moment of inertia matrix
    Jx = {1.1463e-5,'kg*m^2'};
    Jy = {1.6993e-5,'kg*m^2'};
    Jz = {2.9944e-5,'kg*m^2'};
    J = [Jx,0,0;0,Jy,0;0,0,Jz];
    
    % Add time invariant parameters here 

end

variables(Access=private)
    
    % Add time variant variables here
    
    % Torque
    tau_x = {0,'N*m'};
    tau_y = {0,'N*m'};
    tau_z = {0,'N*m'};
    tau = {[0;0;0],'N*m'};
    
    % Angles
    phi = {0,'rad'};
    theta = {0,'rad'};
    psi = {0,'rad'};

    angle_der = {[0;0;0],'rad/s'};
    
    % Rotation matrix
    rot_x = {zeros(3,3),'1'};
    rot_y = {zeros(3,3),'1'};
    rot_z = {zeros(3,3),'1'};
    Rxyz = {zeros(3,3),'1'};

    % Translation matrix
    T = {zeros(3,3),'1'};
end

equations

    % Add all equations here 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % REPLACE/REMOVE ALL THESE EQUATIONS
%     pos == {[0;0;0],'m'};
%     v == {[0;0;0], 'm/s' };
%     a == {[0;0;0], 'm/s^2' };
%     angle == {[0;0;0],'rad'};
%     w == {[0;0;0],'rad/s'};
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % Torques, ctrl = Thrust (T). drag = k, lift = b. d = Length to the rotors from center of copter.
    tau_x == d*sin(pi/4)*(ctrl(4)+ctrl(3)-ctrl(1)-ctrl(2)); % sin(pi/4) because x is in between motor 1 & 4
    tau_y == d*sin(pi/4)*(ctrl(3)+ctrl(2)-ctrl(4)-ctrl(1));  % sin(pi/4) because y is in between motor 4 & 3
    tau_z == drag/lift*(ctrl(1)+ctrl(3)-ctrl(4)-ctrl(2));
    tau == [tau_x;tau_y;tau_z];
    
    % Position, velocity and acceleration
    m*a == -[0;0;m*g]+Rxyz*[0;0;ctrl(1)+ctrl(2)+ctrl(3)+ctrl(4)]; %
    v.der == a;
    pos.der == v;
    
    % Rotational acceleration
    J*w.der == -cross(w,J*w) + tau;
    
    % Euler angles
    angle == [phi;theta;psi];
    
    % Rotation matrices
    rot_x == [1 0 0;0 cos(phi) -sin(phi);0 sin(phi) cos(phi)];
    rot_y == [cos(theta) 0 sin(theta);0 1 0; -sin(theta) 0 cos(theta)];
    rot_z == [cos(psi) -sin(psi) 0; sin(psi) cos(psi) 0; 0 0 1];
    Rxyz == rot_x*rot_y*rot_z;
    
    % Angular velocity in euler angles, taken from https://davidbrown3.github.io/2017-07-25/EulerAngles/ ( Tait bryan angles ) xyz. We need to derive this in the report later. 
    w == T*angle_der;
    angle_der == angle.der;
    
%     T == [cos(theta)*cos(psi), sin(psi),0;
%          -cos(theta)*sin(psi), cos(psi), 0;
%           sin(theta), 0, 1];
    
%     T == [sin(theta)*sin(psi), cos(psi), 0;
%         sin(theta)*cos(psi), -sin(psi), 0;
%         cos(theta), 0, 1];
   

end
end